

Selectors Object: I've created an object called selectors that 
abstracts the selection of HTML elements using CSS selectors. 
Instead of repeatedly calling document.querySelector throughout 
your code, you define these selectors once in an object, 
making it easier to access and manipulate the elements.

Functions for Reusability: I've defined several functions 
like bookButton, viewBook, createPreviewsFragment, 
settingsEvents, themeUpdate, moreBooks, searchFunctions, 
and createSearchHTML. These functions abstract specific tasks 
and operations, promoting code reuse and modularity.

Themes: I've abstracted theme-related settings into two 
objects: day and night. This abstraction allows you to easily 
switch between different color schemes by changing the values 
in these objects, without modifying the code that uses these 
colors.

Data Filtering: In the createSearchHTML function, you 
abstract the filtering logic based on user input. 
The function takes user input as filters, applies these 
filters to the books array, and generates filtered results. 
This abstraction separates the filtering logic from the code 
responsible for displaying results.

HTML Generation: The createPreviewsFragment function 
abstracts the generation of HTML elements for book previews. 
It takes a set of books, creates HTML elements for each book, 
and returns a document fragment. This abstraction simplifies 
the process of adding books to the webpage.

Event Handling: Abstraction is used in event handling. 
I've defined event listeners for various elements and 
abstracted the actions they perform when triggered. 
For example, the viewBook function abstracts the behavior of 
showing book details when a button is clicked.

Theme Selection: You abstract the process of selecting and 
applying themes in the themeUpdate function. 
It dynamically updates the CSS properties based on the user's 
theme choice.